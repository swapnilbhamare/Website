define("buttonCommon/mixins/buttonMixin",["lodash","santaProps","utils","textCommon"],function(t,e,n,i){"use strict";return{propTypes:{compData:e.Types.Component.compData,scale:e.Types.Component.scale,compProp:e.Types.Component.compProp},mixins:[i.textScaleMixin],componentWillMount:function(){this.currentStyle=this.props.theme,this.currentScale=this.props.scale||1},componentWillReceiveProps:function(e){var n=e.theme,i=e.scale||1;t.isEqual(this.currentStyle,n)&&this.currentScale===i||(this.shouldRecalculateLineHeight=!0),this.currentStyle=n,this.currentScale=i},componentDidUpdate:function(){this.shouldRecalculateLineHeight&&(this.shouldRecalculateLineHeight=!1)},resetMinHeightIfNeeded:function(t){this.shouldRecalculateLineHeight&&(t[""]=t[""]||{},t[""].style=t[""].style||{},t[""].style.minHeight="")},getLabelStyle:function(){var e=t.merge(function(t){var e={};"center"!==t.compProp.align&&(e["margin"+(t.compProp.align?n.stringUtils.capitalize(t.compProp.align):"")]=t.compProp.margin);return e}(this.props),function(t){var e={};return""!==t.compProp.padding&&(e.padding=t.compProp.padding),e}(this.props),this.getFontSize(),function(){return this.shouldRecalculateLineHeight?{lineHeight:""}:{}}.call(this));return t.omitBy(e,t.isUndefined)}}}),define("buttonCommon",["buttonCommon/mixins/buttonMixin"],function(t){"use strict";return{buttonMixin:t}});
//# sourceMappingURL=buttonCommon.min.js.map